(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)
(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort Set () (Array Elt Bool))
(define-fun smt_set_emp () Set ((as const Set) false))
(define-fun smt_set_mem ((x Elt) (s Set)) Bool (select s x))
(define-fun smt_set_add ((s Set) (x Elt)) Set (store s x true))
(define-fun smt_set_cup ((s1 Set) (s2 Set)) Set ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 Set) (s2 Set)) Set ((_ map and) s1 s2))
(define-fun smt_set_com ((s Set)) Set ((_ map not) s))
(define-fun smt_set_dif ((s1 Set) (s2 Set)) Set (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 Set) (s2 Set)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun int_apply_$35$$35$3 (Int Int Int Int) Int)
(declare-fun bool_apply_$35$$35$6 (Int Int Int Int Int Int Int) Bool)
(declare-fun map_apply_$35$$35$4 (Int Int Int Int Int) Map)
(declare-fun real_apply_$35$$35$2 (Int Int Int) Real)
(declare-fun lam_int_arg$35$$35$3 () Int)
(declare-fun set_apply_$35$$35$1 (Int Int) Set)
(declare-fun lam_int_arg$35$$35$5 () Int)
(declare-fun set_to_int (Set) Int)
(declare-fun bitvec_apply$35$$35$6 (Int Int Int Int Int Int Int) (_ BitVec 32))
(declare-fun int_apply_$35$$35$5 (Int Int Int Int Int Int) Int)
(declare-fun map_apply_$35$$35$2 (Int Int Int) Map)
(declare-fun real_apply_$35$$35$4 (Int Int Int Int Int) Real)
(declare-fun lam_int_arg$35$$35$2 () Int)
(declare-fun bitvec_apply$35$$35$1 (Int Int) (_ BitVec 32))
(declare-fun int_apply_$35$$35$2 (Int Int Int) Int)
(declare-fun bool_apply_$35$$35$7 (Int Int Int Int Int Int Int Int) Bool)
(declare-fun map_apply_$35$$35$5 (Int Int Int Int Int Int) Map)
(declare-fun real_apply_$35$$35$3 (Int Int Int Int) Real)
(declare-fun set_apply_$35$$35$6 (Int Int Int Int Int Int Int) Set)
(declare-fun bitvec_apply$35$$35$7 (Int Int Int Int Int Int Int Int) (_ BitVec 32))
(declare-fun int_apply_$35$$35$4 (Int Int Int Int Int) Int)
(declare-fun bool_apply_$35$$35$1 (Int Int) Bool)
(declare-fun map_apply_$35$$35$3 (Int Int Int Int) Map)
(declare-fun real_apply_$35$$35$5 (Int Int Int Int Int Int) Real)
(declare-fun lam_int_arg$35$$35$4 () Int)
(declare-fun lam_int_arg$35$$35$1 () Int)
(declare-fun bitvec_apply$35$$35$2 (Int Int Int) (_ BitVec 32))
(declare-fun int_apply_$35$$35$1 (Int Int) Int)
(declare-fun bool_apply_$35$$35$4 (Int Int Int Int Int) Bool)
(declare-fun map_apply_$35$$35$6 (Int Int Int Int Int Int Int) Map)
(declare-fun set_apply_$35$$35$7 (Int Int Int Int Int Int Int Int) Set)
(declare-fun map_to_int (Map) Int)
(declare-fun set_apply_$35$$35$2 (Int Int Int) Set)
(declare-fun real_apply_$35$$35$1 (Int Int) Real)
(declare-fun bitvec_to_int ((_ BitVec 32)) Int)
(declare-fun bitvec_apply$35$$35$3 (Int Int Int Int) (_ BitVec 32))
(declare-fun bool_apply_$35$$35$5 (Int Int Int Int Int Int) Bool)
(declare-fun map_apply_$35$$35$7 (Int Int Int Int Int Int Int Int) Map)
(declare-fun set_apply_$35$$35$4 (Int Int Int Int Int) Set)
(declare-fun real_to_int (Real) Int)
(declare-fun smt_lambda (Int Int) Int)
(declare-fun set_apply_$35$$35$3 (Int Int Int Int) Set)
(declare-fun lam_int_arg$35$$35$7 () Int)
(declare-fun int_apply_$35$$35$7 (Int Int Int Int Int Int Int Int) Int)
(declare-fun bitvec_apply$35$$35$4 (Int Int Int Int Int) (_ BitVec 32))
(declare-fun bool_apply_$35$$35$2 (Int Int Int) Bool)
(declare-fun real_apply_$35$$35$6 (Int Int Int Int Int Int Int) Real)
(declare-fun set_apply_$35$$35$5 (Int Int Int Int Int Int) Set)
(declare-fun bool_apply_$35$$35$3 (Int Int Int Int) Bool)
(declare-fun map_apply_$35$$35$1 (Int Int) Map)
(declare-fun real_apply_$35$$35$7 (Int Int Int Int Int Int Int Int) Real)
(declare-fun lam_int_arg$35$$35$6 () Int)
(declare-fun int_apply_$35$$35$6 (Int Int Int Int Int Int Int) Int)
(declare-fun bitvec_apply$35$$35$5 (Int Int Int Int Int Int) (_ BitVec 32))
(declare-fun runFun () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808817$35$$35$d3Xr () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808815$35$$35$d3Xp () Int)
(declare-fun addrLen () Int)
(declare-fun Types.$36$tc$39$Minutes () Int)
(declare-fun papp5 () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun x_Tuple65 () Int)
(declare-fun x_Tuple55 () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun VV$35$$35$285 () Int)
(declare-fun x_Tuple77 () Int)
(declare-fun papp3 () Int)
(declare-fun VV$35$$35$367 () Int)
(declare-fun x_Tuple63 () Int)
(declare-fun x_Tuple41 () Int)
(declare-fun Types.$36$tcNumCandles () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun Types.$36$tc$39$NumCandles () Int)
(declare-fun x_Tuple64 () Int)
(declare-fun autolen () Int)
(declare-fun x_Tuple52 () Int)
(declare-fun head () Int)
(declare-fun VV$35$$35$289 () Int)
(declare-fun lit$36$ETH$45$USD () Str)
(declare-fun papp2 () Int)
(declare-fun x_Tuple62 () Int)
(declare-fun VV$35$$35$295 () Int)
(declare-fun lit$36$main () Str)
(declare-fun fromJust () Int)
(declare-fun lq_tmp$36$x$35$$35$256 () Int)
(declare-fun papp7 () Int)
(declare-fun x_Tuple53 () Int)
(declare-fun VV$35$$35$331 () Int)
(declare-fun VV$35$$35$313 () Int)
(declare-fun x_Tuple71 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808813$35$$35$d3Xn () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808819$35$$35$d3Xt () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808811$35$$35$d3Xl () Int)
(declare-fun Types.ethUSDticker () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun x_Tuple74 () Int)
(declare-fun lit$36$$39$Minutes () Str)
(declare-fun len () Int)
(declare-fun papp6 () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun x_Tuple66 () Int)
(declare-fun x_Tuple44 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808824$35$$35$d3Xy () Int)
(declare-fun x_Tuple72 () Int)
(declare-fun isJust () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792808821$35$$35$d3Xv () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun Types.$36$trModule () Int)
(declare-fun x_Tuple75 () Int)
(declare-fun Data.Text.$36$fIsStringText () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun papp1 () Int)
(declare-fun x_Tuple61 () Int)
(declare-fun lit$36$Minutes () Str)
(declare-fun x_Tuple43 () Int)
(declare-fun tail () Int)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun Coinbase.Exchange.Types.Core.ProductId () Int)
(declare-fun x_Tuple51 () Int)
(declare-fun Types.$36$tcMinutes () Int)
(declare-fun x_Tuple73 () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun VV$35$$35$273 () Int)
(declare-fun lit$36$Types () Str)
(declare-fun lit$36$$39$NumCandles () Str)
(declare-fun x_Tuple54 () Int)
(declare-fun VV$35$$35$349 () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun x_Tuple76 () Int)
(declare-fun snd () Int)
(declare-fun fst () Int)
(declare-fun lit$36$NumCandles () Str)
(declare-fun x_Tuple42 () Int)
(assert (distinct lit$36$NumCandles lit$36$$39$NumCandles lit$36$Types lit$36$Minutes lit$36$$39$Minutes lit$36$main lit$36$ETH$45$USD))
(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))
(assert (= (strLen lit$36$ETH$45$USD) 7))
(assert (= (strLen lit$36$main) 4))
(assert (= (strLen lit$36$$39$Minutes) 8))
(assert (= (strLen lit$36$Minutes) 7))
(assert (= (strLen lit$36$Types) 5))
(assert (= (strLen lit$36$$39$NumCandles) 11))
(assert (= (strLen lit$36$NumCandles) 10))
(exit)
