(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)
(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort Set () (Array Elt Bool))
(define-fun smt_set_emp () Set ((as const Set) false))
(define-fun smt_set_mem ((x Elt) (s Set)) Bool (select s x))
(define-fun smt_set_add ((s Set) (x Elt)) Set (store s x true))
(define-fun smt_set_cup ((s1 Set) (s2 Set)) Set ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 Set) (s2 Set)) Set ((_ map and) s1 s2))
(define-fun smt_set_com ((s Set)) Set ((_ map not) s))
(define-fun smt_set_dif ((s1 Set) (s2 Set)) Set (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 Set) (s2 Set)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun int_apply_$35$$35$3 (Int Int Int Int) Int)
(declare-fun bool_apply_$35$$35$6 (Int Int Int Int Int Int Int) Bool)
(declare-fun map_apply_$35$$35$4 (Int Int Int Int Int) Map)
(declare-fun real_apply_$35$$35$2 (Int Int Int) Real)
(declare-fun lam_int_arg$35$$35$3 () Int)
(declare-fun set_apply_$35$$35$1 (Int Int) Set)
(declare-fun lam_int_arg$35$$35$5 () Int)
(declare-fun set_to_int (Set) Int)
(declare-fun bitvec_apply$35$$35$6 (Int Int Int Int Int Int Int) (_ BitVec 32))
(declare-fun int_apply_$35$$35$5 (Int Int Int Int Int Int) Int)
(declare-fun map_apply_$35$$35$2 (Int Int Int) Map)
(declare-fun real_apply_$35$$35$4 (Int Int Int Int Int) Real)
(declare-fun lam_int_arg$35$$35$2 () Int)
(declare-fun bitvec_apply$35$$35$1 (Int Int) (_ BitVec 32))
(declare-fun int_apply_$35$$35$2 (Int Int Int) Int)
(declare-fun bool_apply_$35$$35$7 (Int Int Int Int Int Int Int Int) Bool)
(declare-fun map_apply_$35$$35$5 (Int Int Int Int Int Int) Map)
(declare-fun real_apply_$35$$35$3 (Int Int Int Int) Real)
(declare-fun set_apply_$35$$35$6 (Int Int Int Int Int Int Int) Set)
(declare-fun bitvec_apply$35$$35$7 (Int Int Int Int Int Int Int Int) (_ BitVec 32))
(declare-fun int_apply_$35$$35$4 (Int Int Int Int Int) Int)
(declare-fun bool_apply_$35$$35$1 (Int Int) Bool)
(declare-fun map_apply_$35$$35$3 (Int Int Int Int) Map)
(declare-fun real_apply_$35$$35$5 (Int Int Int Int Int Int) Real)
(declare-fun lam_int_arg$35$$35$4 () Int)
(declare-fun lam_int_arg$35$$35$1 () Int)
(declare-fun bitvec_apply$35$$35$2 (Int Int Int) (_ BitVec 32))
(declare-fun int_apply_$35$$35$1 (Int Int) Int)
(declare-fun bool_apply_$35$$35$4 (Int Int Int Int Int) Bool)
(declare-fun map_apply_$35$$35$6 (Int Int Int Int Int Int Int) Map)
(declare-fun set_apply_$35$$35$7 (Int Int Int Int Int Int Int Int) Set)
(declare-fun map_to_int (Map) Int)
(declare-fun set_apply_$35$$35$2 (Int Int Int) Set)
(declare-fun real_apply_$35$$35$1 (Int Int) Real)
(declare-fun bitvec_to_int ((_ BitVec 32)) Int)
(declare-fun bitvec_apply$35$$35$3 (Int Int Int Int) (_ BitVec 32))
(declare-fun bool_apply_$35$$35$5 (Int Int Int Int Int Int) Bool)
(declare-fun map_apply_$35$$35$7 (Int Int Int Int Int Int Int Int) Map)
(declare-fun set_apply_$35$$35$4 (Int Int Int Int Int) Set)
(declare-fun real_to_int (Real) Int)
(declare-fun smt_lambda (Int Int) Int)
(declare-fun set_apply_$35$$35$3 (Int Int Int Int) Set)
(declare-fun lam_int_arg$35$$35$7 () Int)
(declare-fun int_apply_$35$$35$7 (Int Int Int Int Int Int Int Int) Int)
(declare-fun bitvec_apply$35$$35$4 (Int Int Int Int Int) (_ BitVec 32))
(declare-fun bool_apply_$35$$35$2 (Int Int Int) Bool)
(declare-fun real_apply_$35$$35$6 (Int Int Int Int Int Int Int) Real)
(declare-fun set_apply_$35$$35$5 (Int Int Int Int Int Int) Set)
(declare-fun bool_apply_$35$$35$3 (Int Int Int Int) Bool)
(declare-fun map_apply_$35$$35$1 (Int Int) Map)
(declare-fun real_apply_$35$$35$7 (Int Int Int Int Int Int Int Int) Real)
(declare-fun lam_int_arg$35$$35$6 () Int)
(declare-fun int_apply_$35$$35$6 (Int Int Int Int Int Int Int) Int)
(declare-fun bitvec_apply$35$$35$5 (Int Int Int Int Int Int) (_ BitVec 32))
(declare-fun runFun () Int)
(declare-fun VV$35$$35$2024 () Int)
(declare-fun lq_tmp$36$x$35$$35$1208 () Int)
(declare-fun addrLen () Int)
(declare-fun lq_tmp$36$x$35$$35$1332 () Int)
(declare-fun papp5 () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun fix$36$$58$Main.main () Int)
(declare-fun x_Tuple65 () Int)
(declare-fun VV$35$$35$1790 () Int)
(declare-fun VV$35$$35$1547 () Int)
(declare-fun x_Tuple55 () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun x_Tuple77 () Int)
(declare-fun VV$35$$35$1619 () Int)
(declare-fun papp3 () Int)
(declare-fun VV$35$$35$1946 () Int)
(declare-fun x_Tuple63 () Int)
(declare-fun x_Tuple41 () Int)
(declare-fun VV$35$$35$2066 () Int)
(declare-fun VV$35$$35$1737 () Int)
(declare-fun Coinbase.Exchange.Types.$36$fShowExchangeFailure () Int)
(declare-fun VV$35$$35$1571 () Int)
(declare-fun VV$35$$35$1729 () Int)
(declare-fun GHC.Prim.void$35$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1355 () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun x_Tuple64 () Int)
(declare-fun VV$35$$35$2043 () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun VV$35$$35$1895 () Int)
(declare-fun lq_tmp$36$x$35$$35$1042 () Int)
(declare-fun Types.Minutes () Int)
(declare-fun VV$35$$35$1643 () Int)
(declare-fun autolen () Int)
(declare-fun lq_tmp$36$x$35$$35$1196 () Int)
(declare-fun x_Tuple52 () Int)
(declare-fun ds_dzSu () Int)
(declare-fun head () Int)
(declare-fun Main.period () Int)
(declare-fun VV$35$$35$1965 () Int)
(declare-fun VV$35$$35$2001 () Int)
(declare-fun lit$36$Did$32$not$32$get$32$any$32$candles () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792931545$35$$35$dzSV () Int)
(declare-fun papp2 () Int)
(declare-fun VV$35$$35$1750 () Int)
(declare-fun lq_tmp$36$x$35$$35$1270 () Int)
(declare-fun x_Tuple62 () Int)
(declare-fun lit$36$Main () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792931550$35$$35$dzT0 () Int)
(declare-fun VV$35$$35$1979 () Int)
(declare-fun VV$35$$35$1960 () Int)
(declare-fun VV$35$$35$2040 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792931554$35$$35$dzT4 () Int)
(declare-fun mgr$35$$35$azJO () Int)
(declare-fun lit$36$main () Str)
(declare-fun VV$35$$35$1698 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792931557$35$$35$dzT7 () Int)
(declare-fun fromJust () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792931551$35$$35$dzT1 () Int)
(declare-fun VV$35$$35$2059 () Int)
(declare-fun Coinbase.Exchange.Types.Live () Int)
(declare-fun VV$35$$35$1610 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792931555$35$$35$dzT5 () Int)
(declare-fun papp7 () Int)
(declare-fun Types.NumCandles () Int)
(declare-fun b$35$$35$azJR () Int)
(declare-fun VV$35$$35$1855 () Int)
(declare-fun x_Tuple53 () Int)
(declare-fun VV$35$$35$1606 () Int)
(declare-fun lq_tmp$36$x$35$$35$1061 () Int)
(declare-fun Network.HTTP.Client.TLS.tlsManagerSettings () Int)
(declare-fun x_Tuple71 () Int)
(declare-fun mgr$35$$35$azJP () Int)
(declare-fun fldList () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792931568$35$$35$dzTi () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792931560$35$$35$dzTa () Int)
(declare-fun GHC.Base.Nothing () Int)
(declare-fun GHC.Base.$36$fMonadIO () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792931564$35$$35$dzTe () Int)
(declare-fun Data.Foldable.$36$fFoldable$91$$93$ () Int)
(declare-fun VV$35$$35$1603 () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun VV$35$$35$1746 () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun x_Tuple74 () Int)
(declare-fun VV$35$$35$1984 () Int)
(declare-fun lq_tmp$36$x$35$$35$1121 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun lq_tmp$36$x$35$$35$967 () Int)
(declare-fun lq_tmp$36$x$35$$35$1331 () Int)
(declare-fun len () Int)
(declare-fun papp6 () Int)
(declare-fun lq_tmp$36$x$35$$35$1054 () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun Lib.$36$fShowSMA () Int)
(declare-fun x_Tuple66 () Int)
(declare-fun x_Tuple44 () Int)
(declare-fun lenRight () Int)
(declare-fun Coinbase.Exchange.Types.ExchangeConf () Int)
(declare-fun VV$35$$35$1842 () Int)
(declare-fun lq_tmp$36$x$35$$35$1414 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792931543$35$$35$dzST () Int)
(declare-fun VV$35$$35$2005 () Int)
(declare-fun VV$35$$35$2033 () Int)
(declare-fun lq_tmp$36$x$35$$35$1242 () Int)
(declare-fun x_Tuple72 () Int)
(declare-fun lit$36$TenCandlesticks.svg () Str)
(declare-fun VV$35$$35$1694 () Int)
(declare-fun isJust () Int)
(declare-fun ds_dzSG () Int)
(declare-fun Main.$36$trModule () Int)
(declare-fun lq_tmp$36$x$35$$35$1223 () Int)
(declare-fun VV$35$$35$2069 () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun isLeftHd () Int)
(declare-fun x_Tuple75 () Int)
(declare-fun mgr$35$$35$azLr () Int)
(declare-fun err$35$$35$azJQ () Int)
(declare-fun GHC.Show.$36$fShowInt () Int)
(declare-fun VV$35$$35$1639 () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun lq_tmp$36$x$35$$35$930 () Int)
(declare-fun Coinbase.Exchange.Types.Sandbox () Int)
(declare-fun VV$35$$35$1851 () Int)
(declare-fun VV$35$$35$1589 () Int)
(declare-fun papp1 () Int)
(declare-fun x_Tuple61 () Int)
(declare-fun liveConfig$35$$35$azLs () Int)
(declare-fun x_Tuple43 () Int)
(declare-fun tail () Int)
(declare-fun lq_tmp$36$x$35$$35$1215 () Int)
(declare-fun x_Tuple51 () Int)
(declare-fun x_Tuple73 () Int)
(declare-fun VV$35$$35$2009 () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun lq_tmp$36$x$35$$35$881 () Int)
(declare-fun Data.Either.isLeft () Int)
(declare-fun Main.main () Int)
(declare-fun lq_tmp$36$x$35$$35$1088 () Int)
(declare-fun x_Tuple54 () Int)
(declare-fun VV$35$$35$1623 () Int)
(declare-fun VV$35$$35$1834 () Int)
(declare-fun lq_tmp$36$x$35$$35$1459 () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun fix$36$$36$dShow_azPQ () Int)
(declare-fun x_Tuple76 () Int)
(declare-fun VV$35$$35$1990 () Int)
(declare-fun snd () Int)
(declare-fun fst () Int)
(declare-fun x_Tuple42 () Int)
(declare-fun lq_tmp$36$x$35$$35$1069 () Int)
(assert (distinct lit$36$TenCandlesticks.svg lit$36$main lit$36$Main lit$36$Did$32$not$32$get$32$any$32$candles))
(assert (distinct Coinbase.Exchange.Types.Sandbox Coinbase.Exchange.Types.Live))
(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))
(assert (= (strLen lit$36$Did$32$not$32$get$32$any$32$candles) 23))
(assert (= (strLen lit$36$Main) 4))
(assert (= (strLen lit$36$main) 4))
(assert (= (strLen lit$36$TenCandlesticks.svg) 19))
(exit)
